apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'application'


sourceCompatibility = 1.7
defaultTasks 'jar'
group = "winash"
version = "SNAPSHOT"


buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'eu.appsatori:gradle-fatjar-plugin:0.2-rc1'

    }
}

apply plugin: 'fatjar'


fatJarPrepareFiles {
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
}


configurations {
    compile.visible = true
}

repositories {
    mavenLocal()
    mavenCentral()
}


dependencies {
    groovy "org.codehaus.groovy:groovy:2.1.2"
    compile 'org.codehaus.groovy:groovy-groovysh:2.1.1'
    compile 'org.codehaus.groovy:groovy-xml:2.1.1'
    compile "org.ow2.asm:asm:4.1"
    compile "org.ow2.asm:asm-util:4.1"
    compile "org.ow2.asm:asm-commons:4.1"
    compile 'jline:jline:1.0'
    compile 'org.fusesource.jansi:jansi:1.9'
    compile 'org.antlr:antlr:3.5'



}

jar{
manifest {
    attributes("Premain-Class": "asm.Inspector", "Agent-class": "asm.Inspector","Can-Redefine-Classes":true,"Can-Retransform-Classes":true)
}
}
task idea << {

    // change this to the name of your module file
    def moduleFileName = "groovy-inspect.iml"
    def root = new XmlParser().parse(moduleFileName)
    def newModuleRootManager = root.component.find {it.'@name' == 'NewModuleRootManager'}

    // if there is already a module library in place we should remove it
    remove(newModuleRootManager)

    // add the new module library with our current gradle dependencies
    addEntry(newModuleRootManager)

    // output the .iml XML
    def writer = new StringWriter()
    new XmlNodePrinter(new PrintWriter(writer)).print(root)
    def result = writer.toString()
    print result

    // overwrite our old .iml file
    def moduleFile = new File(moduleFileName)
    moduleFile.text = result
}

private def addEntry(newModuleRootManager) {
    def newEntry = newModuleRootManager.appendNode('orderEntry', [type: project.orderEntryType])
    def newLibrary = newEntry.appendNode('library', [name: project.gradleLibraryId])
    def classesNode = newLibrary.appendNode('CLASSES')

    def path = configurations.compile.asPath
    def jars = path.split(System.getProperty("path.separator"))
    jars = Arrays.asList(jars)

    jars.each { jar ->

        classesNode.appendNode('root', [url: "jar://$jar!/"])
    }
}

private def remove(newModuleRootManager) {
    def oldEntry = newModuleRootManager.orderEntry.find {
        (it.'@type' == project.orderEntryType) && (it.library[0].'@name' == project.gradleLibraryId)
    }
    if (oldEntry) {
        newModuleRootManager.remove(oldEntry)
    }
}



